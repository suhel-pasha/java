Abstract
process of hiding internal implimentation from the user and allowing him to use only functionality 
2 ways

1. abstract class
a class declared with the keyword abstract
If any class has 2 or more absatract method that class should be declared abstract
any method with no body is called abstract method
the opposite method is called concrete method
we cannot create object of abstract class because it is incomplete class
some class sholud always be derived from abstract class to give it implimentation
if any class extends any abstract class that class must implement all the method or it must also be declared as abstract
abstract class can also contain iib and sib
Concrete method can private, static , final
abstract can not be private, static , final
static and private methods cant be overridden

2. through interfaces
Interface is the blueprint of the class
it has static constant and abstract methods
any variable declare with final and static key word is called static constant
all the variables declared in an interface is by default public static and final
we used interface to achieve 100 percent abstraction till java 8

but later some concrete method can be used as well

we can achieve multiople inheritence and loose coupling

we cannot create object of interface
and interface cannot be instanciated and it cannot have constructor
some interfaces are with empty body they are markup interface
markup interface suggest JVM what needs to be done

clonable and serializable interfaces are the examples
we can write interface inside interface its called nested interface
Syntax:
 interface <interface-name>{
// static constants
// abstract methods
}
a class always impliments interface
an interface never extend or implement class
abstract class can implement interface
if implements than its child
abstract class can implement interface but the oppposite not possible

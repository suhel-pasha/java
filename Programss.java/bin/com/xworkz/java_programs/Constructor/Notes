CONSTRUCTOR

« Constructor is a block of code similar to a method and it is called during instance creation of class.

« Constructor is used to initialize states of an object.
"Syntax:
	Class AMB{
	AMB(){
	//Statements
	}
        }

"

« When we write a constructor, constructor name should be class name always.


« To control constructor access we can specify access specifier.

« We can write return statements inside constructor.

« Constructor returns address of an object always but it not returns any values.
« Constructor should not be final,static,abstract and synchronized.

1. No-arg Constructor (Default Constructor).

2.  Parameterized Constructor.

1. No-arg Constructor:

« Constructor which has no parameters is called as no-arg or default constructor.
Example:
"public class Amb {
        String name;
        int noOfParticipents;
        Amb(){
                System.out.println(""Amb created"");
        }
}
public class NoArgConstructorDemo {
	public static void main(String args[]) {
		Amb amb = new Amb();
		System.out.println(amb.name);
		System.out.println(amb.noOfParticipents);
		
	}

}
"
OUTPUT:
"Amb created
null
0
"

« If we don’t define any constructor in our class then compiler will going to create default constructor for that class.

« If we define any constructor then compiler does not define any constructor.

« Constructor does not have any return type because constructor does not return different values, it always returns address of object.

« Default value for integer in a constructor is null, for Boolean its false, for floating point it is 0.0, and for character it is null.

« Default constructor will initialize state of an object.

2. Parameterized Constructor

« Constructor which has parameters is called as Parameterized Constructor.

« To define our own value to the state of an object then we use parameterized constructor.

EXAMPLE:

"public class Amb {
        String name;
        int noOfParticipents;
        Amb(String name1, int noOfParticipents1){
                System.out.println(""Amb created"");
                name=name1;
                noOfParticipents=noOfParticipents1;
        
        }
}
public class ParameterizedConstructorDemo {
        public static void main(String args[]) {
                Amb amb = new Amb(""AMB"",17);
                System.out.println(""name of the group is: ""+amb.name);
                System.out.println(""number of participents is:""+amb.noOfParticipents);
        }
}
                



"
OUTPUT:
"Amb created
name of the group is: AMB
number of participents is:17"

CONSTRUCTOR OVERLOADING

« We overload constructor to create a object in different ways.

« We can create a any number of constructor for a class.

« There are two ways to overload constructor:

· By changing number of parameters.

· By changing type of parameter.

EXAMPLE:

"public class Amb {
        String name;
        int noOfParticipents;
        Amb(){
                System.out.println(""Default constructor"");
        }
        Amb(String name1){
                System.out.println(""a parameterized constructor"");
                name=name1;
        }
        Amb(String name1, int noOfParticipents1){
                System.out.println(""2 parameterized constructor"");
                name=name1;
                noOfParticipents=noOfParticipents1;
        }
        

}
"
"public class ConstructorOverloadingDemo {
        public static void main(String[] args) {
                Amb amb=new Amb();
                System.out.println(""amb.name"");
                System.out.println(""amb.noOfParticipents"");
                Amb amb1=new Amb(""AMB"");
                System.out.println(""amb1.name"");
                System.out.println(""amb1.noOfParticipents"");
                Amb amb2=new Amb(""AMB"",17);
                System.out.println(""amb2.name"");
                System.out.println(""amb2.noOfParticipents"");        
        }

}
"

OUTPUT:
"Default constructor
amb.name
amb.noOfParticipents
a parameterized constructor
amb1.name
amb1.noOfParticipents
2 parameterized constructor
amb2.name
amb2.noOfParticipents
"
CONSTRUCTOR CHAINING

« The process of calling a constructor from the another constructor with respect to current object is called as Constructor Chaining.

« There are two ways to do constructor chaining:

· With in same class.

· From base class.

1. Within same class:

EXAMPLE:

"public class Pen {
        String brand;
        String color;
        Pen(){
                this(""Renold"");
                System.out.println(""Pen is created with default value"");        
        }
        Pen(String brand1){
                this(brand1,""blue"");
                System.out.println(""a parameterized constructor"");        
                brand=brand1;
        }
        Pen(String brand1, String color1){
                System.out.println(""2 parameterized constructor"");        
                brand=brand1;
                color=color1;
                
        }

}
"
"public class PenTest {
	public static void main(String[] args) {
		Pen pen = new Pen();
		System.out.println(pen.brand);
		System.out.println(pen.color);
	}

}


"


OUTPUT:

"2 parameterized constructor
a parameterized constructor
Pen is created with default value
Renold
blue
"

« We achieve constructor chaining by within same class by using this() keyword.

« this() keyword should be first statement in any of the constructor.

« In a class at least one constructor should not have this() keyword, If we use it the it cause Recursive call or Infinite Loop.

« We can change order of the constructor chaining.

« this() keyword always points current keyword.

2. From base class:

Example:

"public class Animal {
        int legs;
        public Animal(int legs1 ) {
                System.out.println(""Constructor of animal"");
                        legs=legs1;
                }
        }
public class Cat extends Animal {
        String name;
        Cat(){
                super(4);
                System.out.println(""cat is created"");
        }
        Cat(String name1){
                super(4);
                name=name1;
                System.out.println(""a parameterized constructor"");
        }
}
public class AnimalTest {
        public static void main(String args[]) {
                Cat cat= new Cat(""Siri"");
                System.out.println(""Cat name is: ""+cat.name);
                System.out.println(""Cat has ""+cat.legs+"" legs"");
        }

}



"
OUTPUT:

"Constructor of animal
a parameterized constructor
Cat name is: Siri
Cat has 4 legs
"

« We achieve constructor chaining from base class by using super() keyword from base class.

« Here constructor chaining occurs through inheritance.

« A sub class constructor’s task is to call super class’s constructor first.

« This ensures that creation of sub class’s object.

« There can be any number of classes in inheritance chain.

« Every constructor calls chain till class at the top reached.

« Before initializing child class member we should initialize super class member.

« super() keyword always points parent keyword.

« Each and every constructor of subclass should call super class i.e., parent class.


We need constructor chaining because this process is used when we want to perform multiple tasks in a single constructor rather than creating a code for each task in a single constructor we create a separate constructor for each task and make their chain which makes the program more readable.

" We cannot use super() and this() keyword in the same constructor because this() and super() keyword should be the first statement in any of the constructor. Hence its can’t able to use both keywords in same constructor.

"

Final Keyword

1.Keyword used to represent constant

2.if any variable declared with final keyword it should be initialized by value.

3.cant modify the value.


















 Initializing a final variable :

 We must initialize a final variable, otherwise compiler will throw compile-time error.

 A final variable can only be initialized once, either via an initializer or an assignment statement. There are three ways to initialize a final variable :

 1.we can initialize a final variable when it is declared

2.A blank final variable can be initialized inside instance-initializer block or inside constructor.

 If you have more than one constructor in your class then it must be initialized in all of them, otherwise compile time error will be thrown.

3.A blank final static variable can be initialized inside static block.

Reference final variable :

 When a final variable is a reference to an object, then this final variable is called reference final variable.

* When a final variable is created inside a method/constructor/block, it is called local final variable, and it must initialize once where it is created.

 Examples:

fianl int J=20;
    int K=j;
    System.out.println(k++);
  int K=I;
int getvalue() {
return k++            //can be done//


 final int i=10;                     //cant be done//
System.out.println(i++);
 int getvalue() {
return I++;